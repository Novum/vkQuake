#version 460
#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

layout (push_constant) uniform PushConsts
{
	int num_draws;
	uint visibility_offset;
	float vieworg_x;
	float vieworg_y;
	float vieworg_z;
}
push_constants;

struct surface_t
{
	uint  packed_lightstyles;
	float normal_x;
	float normal_y;
	float normal_z;
	float dist;
	uint  packed_light_st_and_tex;
	uint  packed_vbo_offset_and_count;
	uint  packed_texturemins;
	vec4  vecs[2];
};

struct VkDrawIndexedIndirectCommand_t {
    uint    indexCount;
    uint    instanceCount;
    uint    firstIndex;
    int     vertexOffset;
    uint    firstInstance;
};

layout (std430, set = 0, binding = 0) restrict buffer indirect_draw_buffer
{
	VkDrawIndexedIndirectCommand_t indirect_draw_data[];
};
layout (std430, set = 0, binding = 1) restrict readonly buffer surfaces_buffer
{
	surface_t surfaces[];
};
layout (std430, set = 0, binding = 2) restrict readonly buffer visibility_buffer
{
	uint visibility[];
};
layout (std430, set = 0, binding = 3) restrict buffer ib
{
	uint indices[];
};

uint R_NumTriangleIndicesForSurf (uint edges)
{
	return 3 * (edges - 2);
}

void R_TriangleIndicesForSurf (uint firstvert, uint numedges, uint dest)
{
	int i;
	for (i = 2; i < numedges; i++)
	{
		indices[dest++] = firstvert;
		indices[dest++] = firstvert + i - 1;
		indices[dest++] = firstvert + i;
	}
}

layout (local_size_x = 64, local_size_y = 1) in;
void main ()
{
	const uint surf = gl_GlobalInvocationID.x;
	if (surf >= push_constants.num_draws)
		return;

	const uint vis_word = visibility[push_constants.visibility_offset + surf / 32];
	const uint vis_mask = 1 << (surf % 32);
	if ((vis_word & vis_mask) == 0)
		return;

	const vec3  surf_normal = vec3 (surfaces[surf].normal_x, surfaces[surf].normal_y, surfaces[surf].normal_z);
	const vec3  vieworg = vec3 (push_constants.vieworg_x, push_constants.vieworg_y, push_constants.vieworg_z);
	const float dist = surfaces[surf].dist;
	const float dp = dot (surf_normal, vieworg); 
	const bool  backface = (surfaces[surf].packed_light_st_and_tex & 0x8000) != 0;
	if (backface && dp > dist || !backface && dp < dist)
		return;

	const uint tex_idx = surfaces[surf].packed_light_st_and_tex & 0x7FFF;
	const uint firstvert = surfaces[surf].packed_vbo_offset_and_count & 0xFFFFFF;
	const uint numedges = surfaces[surf].packed_vbo_offset_and_count >> 24;
	const uint indexcount = R_NumTriangleIndicesForSurf (numedges);
	const uint dest = indirect_draw_data[tex_idx].firstIndex + atomicAdd (indirect_draw_data[tex_idx].indexCount, indexcount);
	R_TriangleIndicesForSurf (firstvert, numedges, dest);
}
